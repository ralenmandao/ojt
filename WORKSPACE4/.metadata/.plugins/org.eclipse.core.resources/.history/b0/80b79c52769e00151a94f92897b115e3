package com.ralen;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.reflections.Reflections;
import org.reflections.scanners.FieldAnnotationsScanner;
import org.reflections.scanners.SubTypesScanner;
import org.reflections.scanners.TypeAnnotationsScanner;
import org.reflections.util.ClasspathHelper;
import org.reflections.util.ConfigurationBuilder;

import com.ralen.annotation.Bean;
import com.ralen.annotation.Inject;

public class ApplicationContext {

	private Reflections reflections = null;
	private Map<String, Object> clazz = new HashMap<String, Object>();

	public ApplicationContext(String basePackage) {
		reflections = new Reflections(new ConfigurationBuilder()
										.setUrls(ClasspathHelper.forPackage(basePackage))
										.setScanners(new FieldAnnotationsScanner(),
													 new TypeAnnotationsScanner(),
													 new SubTypesScanner()));
		Set<Class<?>> beans = reflections.getTypesAnnotatedWith(Bean.class);
		for (Class<?> bean : beans) {
			try {
				Bean an = bean.getAnnotation(Bean.class);
				String name = null;
				if(an.value().length() == 0){
					name = bean.getSimpleName();
				}else{
					name = an.value();
				}
				clazz.put(name.toLowerCase(), (Object) bean.newInstance());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@SuppressWarnings("unchecked")
	public <T> T getBean(String name) {
		return (T) convertInstanceOfObject(clazz.get(name), clazz.get(name).getClass());
	}
	
	private static <T> T convertInstanceOfObject(Object o, Class<T> clazz) {
	    try {
	        return clazz.cast(o);
	    } catch(ClassCastException e) {
	        return null;
	    }
	}

	public Collection<Object> getBeans() {
		return clazz.values();
	}

	public void lol() {
		for (String o : clazz.keySet()) {
			System.out.println(o);
		}
	}
	
	public void test(){
		Set<Field> fields = reflections.getFieldsAnnotatedWith(Inject.class);
		System.out.println("Size : " + fields.size())
		for(Field field: fields){
			System.out.println(field.getName());
		}
	}
}
